
# authentik:
#   log_level: info
#   secret_key: "${AUTHENTIK_SECRET_KEY}"
#   bootstrap:
#     password: "${AUTHENTIK_BOOTSTRAP_PASSWORD}"
#     token: "${AUTHENTIK_BOOTSTRAP_TOKEN}"
#   postgresql:
#     host: authentik-postgresql
#     password: "${POSTGRESQL_PASSWORD}"
#   redis:
#     password: "${REDIS_PASSWORD}"

# ingress:
#   enabled: true
#   ingressClassName: "traefik"
#   hosts:
#     - "authentik.mythbound.dev"
#   tls: []
#   paths:
#     - path: /
#       pathType: Prefix

# readinessProbe:
#   httpGet:
#     path: "/-/health/ready/"
#     port: "http"
# livenessProbe:
#   httpGet:
#     path: "/-/health/live/"
#     port: "http"

apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: authentik
  namespace: authentik
spec:
  chart:
    spec:
      chart: authentik
      version: 2023.10.x
      sourceRef:
        kind: HelmRepository
        name: authentik
        namespace: apps
  interval: 15m
  timeout: 10m
  releaseName: authentik
  values:
    # -- Server replicas
    replicas: 1
    # -- Custom priority class for different treatment by the scheduler
    priorityClassName:
    # -- server securityContext
    securityContext: {}
    # -- server containerSecurityContext
    containerSecurityContext: {}
    # -- server deployment strategy
    strategy: {}
      # type: RollingUpdate
      # rollingUpdate:
      #  maxSurge: 25%
      #  maxUnavailable: 25%

    worker:
      # -- worker replicas
      replicas: 1
      # -- Custom priority class for different treatment by the scheduler
      priorityClassName:
      # -- worker securityContext
      securityContext: {}
      # -- worker containerSecurityContext
      containerSecurityContext: {}
      # -- worker strategy
      strategy: {}
        # type: RollingUpdate
        # rollingUpdate:
        #  maxSurge: 25%
        #  maxUnavailable: 25%

    image:
      repository: ghcr.io/goauthentik/server
      tag: 2023.10.7
      # -- optional container image digest
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []

    # -- Specify any initContainers here as dictionary items. Each initContainer should have its own key. The dictionary item key will determine the order. Helm templates can be used
    initContainers: {}

    # -- Specify any additional containers here as dictionary items. Each additional container should have its own key. Helm templates can be used.
    additionalContainers: {}

    # ingress:
    #   enabled: false
    #   ingressClassName: ""
    #   annotations: {}
    #   labels: {}
    #   hosts:
    #     - host: authentik.domain.tld
    #       paths:
    #         - path: "/"
    #           pathType: Prefix
    #   tls: []

    # -- Annotations to add to the server and worker deployments
    annotations: {}

    # -- Annotations to add to the server and worker pods
    podAnnotations: {}

    authentik:
      # -- Log level for server and worker
      log_level: info
      # -- Secret key used for cookie singing and unique user IDs,
      # don't change this after the first install
      secret_key: "authentik"
      # -- Path for the geoip database. If the file doesn't exist, GeoIP features are disabled.

      postgresql:
        # -- set the postgresql hostname to talk to
        # if unset and .Values.postgresql.enabled == true, will generate the default
        # @default -- `authentik-postgresql`
        host: "authentik-postgresql"
        # -- postgresql Database name
        # @default -- `authentik`
        name: "authentik"
        # -- postgresql Username
        # @default -- `authentik`
        user: "authentik"
        password: ""
        port: 5432
      redis:
        # -- set the redis hostname to talk to
        # @default -- `authentik-redis-master`
        host: "authentik-redis-master"
        password: "authentik"

    # -- see configuration options at https://goauthentik.io/docs/installation/configuration/
    env: {}
    # AUTHENTIK_VAR_NAME: VALUE

    envFrom: []
    #  - configMapRef:
    #      name: special-config

    envValueFrom:
      AUTHENTIK_BOOTSTRAP_PASSWORD:
        secretKeyRef:
          key: authentik_bootstrap_password
          name: authentik
      AUTHENTIK_BOOTSTRAP_TOKEN:
        secretKeyRef:
          key: authentik_bootstrap_token
          name: authentik

    service:
      enabled: true
      type: ClusterIP
      port: 80
      name: http
      protocol: TCP
      labels: {}
      annotations: {}

    volumes: []

    volumeMounts: []

    # -- affinity applied to the deployments
    affinity: {}

    #  -- tolerations applied to the deployments
    tolerations: []

    # -- nodeSelector applied to the deployments
    nodeSelector: {}

    resources:
      server: {}
      worker: {}

    livenessProbe:
      # -- enables or disables the livenessProbe
      enabled: true
      httpGet:
        # -- liveness probe url path
        path: /-/health/live/
        port: http
      initialDelaySeconds: 5
      periodSeconds: 10

    startupProbe:
      # -- enables or disables the livenessProbe
      enabled: true
      httpGet:
        # -- liveness probe url path
        path: /-/health/live/
        port: http
      failureThreshold: 60
      periodSeconds: 5

    readinessProbe:
      enabled: true
      httpGet:
        path: /-/health/ready/
        port: http
      periodSeconds: 10

    serviceAccount:
      # -- Service account is needed for managed outposts
      create: true
      annotations: {}
      serviceAccountSecret:
        # -- As we use the authentik-remote-cluster chart as subchart, and that chart
        # creates a service account secret by default which we don't need here, disable its creation
        enabled: false
      fullnameOverride: authentik
      nameOverride: authentik

    prometheus:
      serviceMonitor:
        create: false
        interval: 30s
        scrapeTimeout: 3s
        # -- labels additional on ServiceMonitor
        labels: {}
      rules:
        create: false
        # -- labels additional on PrometheusRule
        labels: {}
    
    postgresql:
      # -- enable the bundled bitnami postgresql chart
      enabled: true
      postgresqlMaxConnections: 500
      postgresqlUsername: "authentik"
      postgresqlPassword: "authentik"
      postgresqlDatabase: "authentik"
      # persistence:
      #   enabled: true
      #   storageClass:
      #   accessModes:
      #     - ReadWriteOnce
      image:
        tag: 15.4.0-debian-11-r0
    redis:
      # -- enable the bundled bitnami redis chart
      enabled: true
      architecture: standalone
      auth:
        enabled: false
      image:
        tag: 6.2.10-debian-11-r13
