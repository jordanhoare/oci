apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: authentik
  namespace: authentik
spec:
  chart:
    spec:
      chart: authentik
      version: 2023.10.x
      sourceRef:
        kind: HelmRepository
        name: authentik
        namespace: apps
  interval: 15m
  timeout: 10m
  releaseName: authentik

  values:
    replicas: 1

    worker:
      replicas: 1

    image:
      repository: ghcr.io/goauthentik/server
      tag: 2023.10.7
      pullPolicy: IfNotPresent
      pullSecrets: []

    ingress:
      enabled: true
      ingressClassName: "traefik"
      annotations: {}
      labels: {}
      hosts:
        - host: authentik.mythbound.dev
          paths:
            - path: "/"
              pathType: Prefix
      tls: []

    authentik:
      log_level: info
      secret_key: "authentik"
      postgresql:
        host: "authentik-postgresql"
        name: "authentik"
        user: "authentik"
        password: "authentik"
        port: 5432
      redis:
        host: "authentik-redis-master"
        password: "authentik"

    env: 
      # https://goauthentik.io/docs/installation/configuration/
      # https://docs.goauthentik.io/docs/installation/configuration
      AUTHENTIK_REDIS__HOST: authentik-redis-master
      AUTHENTIK_POSTGRESQL__HOST: authentik-postgresql
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__USER: authentik 
      AUTHENTIK_POSTGRESQL__PASSWORD: authentik
      AUTHENTIK_POSTGRESQL__PORT: 5432
      AUTHENTIK_BOOTSTRAP_EMAIL: localhost

    envFrom: []
    #  - configMapRef:
    #      name: special-config

    envValueFrom:
      AUTHENTIK_BOOTSTRAP_PASSWORD:
        secretKeyRef:
          key: AUTHENTIK_BOOTSTRAP_PASSWORD
          name: authentik
      AUTHENTIK_BOOTSTRAP_TOKEN:
        secretKeyRef:
          key: AUTHENTIK_BOOTSTRAP_TOKEN
          name: authentik

    service:
      enabled: true
      type: ClusterIP
      port: 80
      name: http
      protocol: TCP
      labels: {}
      annotations: {}

    volumes: []

    volumeMounts: []
    serviceAccount:
      create: true

    prometheus:
      serviceMonitor:
        create: false
        interval: 30s
        scrapeTimeout: 3s
    
    postgresql:
      enabled: true
      postgresqlMaxConnections: 500
      postgresqlUsername: "authentik"
      postgresqlPassword: "authentik"
      postgresqlDatabase: "authentik"
      # persistence:
      #   enabled: true
      #   storageClass:
      #   accessModes:
      #     - ReadWriteOnce
      image:
        tag: 15.4.0-debian-11-r0

    redis:
      enabled: true
      architecture: standalone
      auth:
        enabled: false
      image:
        tag: 6.2.10-debian-11-r13

    livenessProbe:
      enabled: true
      httpGet:
        path: /-/health/live/
        port: http
      initialDelaySeconds: 20
      periodSeconds: 10

    startupProbe:
      enabled: true
      httpGet:
        path: /-/health/live/
        port: http
      failureThreshold: 60
      periodSeconds: 10

    readinessProbe:
      enabled: true
      httpGet:
        path: /-/health/ready/
        port: http
      periodSeconds: 10
